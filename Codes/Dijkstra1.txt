import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.Scanner;
public class Solution {


	public static void main(String[] args){
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int e = sc.nextInt();

		int[] costs = new int[n];
		Arrays.fill(costs, Integer.MAX_VALUE);
		
		ArrayList<Road>[] edgeList = new ArrayList[n];
		for(int i = 0; i < n; i ++)
			edgeList[i] = new ArrayList<Road>();

		
		for(int i = 0; i < e; i ++)
		{
			int destA = sc.nextInt()-1;
			int destB = sc.nextInt()-1;
			int val = sc.nextInt();
			edgeList[Math.min(destA, destB)].add(new Road(Math.max(destA, destB), val));
			edgeList[Math.max(destA, destB)].add(new Road(Math.min(destA, destB), val));
		}
		
		PriorityQueue<Road> q = new PriorityQueue<Road>();
		q.add(new Road(0,0));
		while(!q.isEmpty())
		{
			Road c = q.remove();
			if(c.cost < costs[c.to]){
				costs[c.to]= c.cost;
				if(c.to == n-1)
				{
					System.out.println(c.cost);
					sc.close();
					return;
				}
				for(int i = 0; i < edgeList[c.to].size(); i ++)
					q.add(new Road(edgeList[c.to].get(i).to,Math.max(edgeList[c.to].get(i).cost, c.cost)));
			}
		}
		System.out.println("NO PATH EXISTS");
		sc.close();
	}
	
	
	static class Road implements Comparable<Road>
	{
		int to;
		int cost;
		Road(int t, int c)
		{
			to = t;
			cost = c;
		}
		
		@Override
		public int compareTo(Road arg0) {
			return cost - arg0.cost;
		}
	}
}
