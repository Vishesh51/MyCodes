static int MAXN=100100;
    static int level=21;
    static int depth[]=new int[MAXN];
    static int parent[][]=new int[MAXN][level];
    static ArrayList<ArrayList<Integer>> al=new ArrayList<ArrayList<Integer>>();

static void dfs(int cur, int prev)
{
    depth[cur] = depth[prev] + 1;
    parent[cur][0] = prev;
    for (int i=0; i<al.get(cur).size(); i++)
    {
        if (al.get(cur).get(i) != prev)
            dfs(al.get(cur).get(i), cur);
    }
}

 static void precomputeSparseMatrix(int n)
{
    for (int node = 1; node <= n; node++)
    {
        for (int i=1; i<level; i++)
        {
            if (parent[node][i-1] != -1)
                parent[node][i] =
                    parent[parent[node][i-1]][i-1];
        }
    }
}

static int lca(int u, int v)
{
    if (depth[v] < depth[u]){
        int temp=u;
        u=v;
        v=temp;
    }
        //swap(u, v);
 
    int diff = depth[v] - depth[u];
 
    // Step 1 of the pseudocode
    for (int i=0; i<level; i++)
        if (((diff>>i)&1)!=0&&parent[v][i]!=-1)
            v = parent[v][i];
 
    // now depth[u] == depth[v]
    if (u == v)
        return u;
 
    // Step 2 of the pseudocode
       try{ 
    for (int i=level-1; i>=0; i--)
        if (parent[u][i]>=0&&parent[v][i]>=0&&(parent[u][i] != parent[v][i]))
        {
            u = parent[u][i];
            v = parent[v][i];
        }}
        catch(Exception e) {System.out.println(u+" "+v);}

int main()
{
    memset(parent,-1,sizeof(parent));
    int n = 8;
    addEdge(1,2);
    addEdge(1,3);
    addEdge(2,4);
    addEdge(2,5);
    addEdge(2,6);
    addEdge(3,7);
    addEdge(3,8);
    depth[0] = 0;
 
    // running dfs and precalculating depth
    // of each node.
    dfs(1,0);
 
    // Precomputing the 2^i th ancestor for evey node
    precomputeSparseMatrix(n);
 
    // calling the LCA function
    cout << "LCA(4, 7) = " << lca(4,7) << endl;
    cout << "LCA(4, 6) = " << lca(4,6) << endl;
    return 0;
}
        
 
    return parent[u][0];
}