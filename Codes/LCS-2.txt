// Dynamic Programming implementation of LCS problem in Java
import java.io.*;
import java.util.*;
 
public class LongestCommonSubsequence {

    public int lcs(char str1[],char str2[],int len1, int len2){
        
        if(len1 == str1.length || len2 == str2.length){
            return 0;
        }
        if(str1[len1] == str2[len2]){
            return 1 + lcs(str1,str2,len1+1,len2+1);
        }
        else{
            return Math.max(lcs(str1,str2,len1+1,len2),lcs(str1,str2,len1,len2+1));
        }
    }

    public String lcsDynamic(int str1[],int str2[]){
    
        int temp[][] = new int[str1.length + 1][str2.length + 1];
        int max = 0;String s="";
        for(int i=1; i < temp.length; i++){
            for(int j=1; j < temp[i].length; j++){
                if(str1[i-1] == str2[j-1]) {
                    temp[i][j] = temp[i - 1][j - 1] + 1;
                  //  s=s+String.valueOf(str1[i-1]);
                }
                else
                {
                    temp[i][j] = Math.max(temp[i][j-1],temp[i-1][j]);
                }
                if(temp[i][j] > max){
                    max = temp[i][j];
                }
            }
        }
        int i = str1.length, j = str2.length;
        while (i > 0 && j > 0)
        {
            // If current character in X[] and Y are same, then
            // current character is part of LCS
            if (str1[i-1] == str2[j-1])
            {
                // Put current character in result
                //lcs[index-1] = X.charAt(i-1); 
                 s=String.valueOf(str2[j-1])+" "+s;
                // reduce values of i, j and index
                i--; 
                j--; 
                //index--;     
            }
  
            // If not same, then find the larger of two and
            // go in the direction of larger value
            else if (temp[i-1][j] > temp[i][j-1])
                i--;
            else
                j--;
        }
        //return max;
    return s;
    }
    
    public static void main(String args[]){
        LongestCommonSubsequence lcs = new LongestCommonSubsequence();
        //String str1 = "ABCDGHLQR";
        //String str2 = "AEDPHR";
        Scanner sc=new Scanner(System.in); int n1=sc.nextInt();
        int n2=sc.nextInt();
        int a[]=new int[n1]; int b[]=new int[n2];
        for(int i=0;i<n1;i++) a[i]=sc.nextInt();
        for(int i=0;i<n2;i++) b[i]=sc.nextInt();
      //  int result = lcs.lcs(str1.toCharArray(), str2.toCharArray(),0,0);
        System.out.print(lcs.lcsDynamic(a, b));
    }
}